{"version":3,"sources":["../../scripts/movement.js"],"names":[],"mappings":"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","file":"movement.js","sourcesContent":["/**\n * Created by charlieguan on 2016-02-23.\n */\nfunction moveAllTiles(event) {\n    \"use strict\";\n    const MOVE_DISTANCE = 109;\n    \n    let isAnyTileMoved  = false,\n          $zeroRow      = $(\"[class*=' 0']\"),\n          $firstRow     = $(\"[class*=' 1']\"),\n          $secondRow    = $(\"[class*=' 2']\"),\n          $thirdRow     = $(\"[class*=' 3']\"),\n          $zeroColumn   = $(\"[class$='0']\"),\n          $firstColumn  = $(\"[class$='1']\"),\n          $secondColumn = $(\"[class$='2']\"),\n          $thirdColumn  = $(\"[class$='3']\");\n\n    switch (event.which) {\n        // up\n        case 38:\n            /*\n             When 'up' is pressed, leave 0th row alone; handle 1st row, then 2nd row, then 3rd row.\n             +---+---+---+---+\n             | 0 | 0 | 0 | 0 |  <-- 0th row\n             +---+---+---+---+\n             | 1 | 1 | 1 | 1 |  <-- 1st row\n             +---+---+---+---+\n             | 2 | 2 | 2 | 2 |  <-- 2nd row\n             +---+---+---+---+\n             | 3 | 3 | 3 | 3 |  <-- 3rd row\n             +---+---+---+---+\n             */\n            $firstRow.each(moveOneTile);\n            $secondRow.each(moveOneTile);\n            $thirdRow.each(moveOneTile);\n            break;\n        // down\n        case 40:\n            // when down is pressed, first handle 2nd row, then 1st row, then 0th row.\n            $secondRow.each(moveOneTile);\n            $firstRow.each(moveOneTile);\n            $zeroRow.each(moveOneTile);\n            break;\n        // left\n        case 37:\n            // when left is pressed, first handle 1st column, then 2nd column, then 3rd column.\n            $firstColumn.each(moveOneTile);\n            $secondColumn.each(moveOneTile);\n            $thirdColumn.each(moveOneTile);\n            break;\n        // right\n        case 39:\n            // when right is pressed, first handle 2nd column, then 1st column, then 0th column.\n            $secondColumn.each(moveOneTile);\n            $firstColumn.each(moveOneTile);\n            $zeroColumn.each(moveOneTile);\n            break;\n    }\n\n    if (isAnyTileMoved === true && $('.tile').length < 16) {\n        window.setTimeout(spawnNewTile, 200);\n    }\n\n    function moveOneTile(index) {\n        let currentPosition = {\n                row   : null,\n                column: null\n            },\n            // since this function is called inside .each(), 'this' refers to the DOM element.\n            $this           = $(this), // jshint ignore: line\n            oldClassName,\n            newClassName;\n\n        // get the 1st and 2nd digit of the current coordinate class name\n        currentPosition.row    = $this.attr('class').split(' ')[2][0];\n        currentPosition.column = $this.attr('class').split(' ')[2][1];\n\n        oldClassName = `${currentPosition.row}${currentPosition.column}`;\n        $this.removeClass(oldClassName);\n        switch (event.which) {\n            // up\n            case 38:\n                if (currentPosition.row > 0) {\n                    /*\n                     Press 'up':\n\n                     Start:                 Step 1:                         Step 2:\n                     merge 3rd row          Double value and stack          Delete stacked tile\n                     +---+                  +------+                        +---+\n                     | 8 |                  | 8    |                        | 8 |\n                     +---+                  +------+                        +---+\n                     | 2 |                  | 4(2) |                        | 4 |\n                     +---+                  +------+                        +---+\n                     | 0 |                  | 0    |                        | 0 |\n                     +---+                  +------+                        +---+\n                     | 2 |                  | 0    |                        | 0 |\n                     +---+                  +------+                        +---+\n                     */\n                    let newRow = moveToEdge($this, 'up', currentPosition.row, currentPosition.column);\n                    if (newRow === -1) {\n                        $this.remove();\n                    } else {\n                        currentPosition.row = newRow;\n                        newClassName        = `${currentPosition.row}${currentPosition.column}`;\n                        $this.addClass(newClassName);\n                    }\n                }\n                break;\n            // down\n            case 40:\n                if (currentPosition.row < 3) {\n                    let newRow = moveToEdge($this, 'down', currentPosition.row, currentPosition.column);\n                    if (newRow === -1) {\n                        $this.remove();\n                    } else {\n                        currentPosition.row = newRow;\n                        newClassName        = `${currentPosition.row}${currentPosition.column}`;\n                        $this.addClass(newClassName);\n                    }\n                }\n                break;\n            // left\n            case 37:\n                if (currentPosition.column > 0) {\n                    let newColumn = moveToEdge($this, 'left', currentPosition.row, currentPosition.column);\n                    if (newColumn === -1) {\n                        $this.remove();\n                    } else {\n                        currentPosition.column = newColumn;\n                        newClassName           = `${currentPosition.row}${currentPosition.column}`;\n                        $this.addClass(newClassName);\n                    }\n                }\n                break;\n            // right\n            case 39:\n                if (currentPosition.column < 3) {\n                    let newColumn = moveToEdge($this, 'right', currentPosition.row, currentPosition.column);\n                    if (newColumn === -1) {\n                        $this.remove();\n                    } else {\n                        currentPosition.column = newColumn;\n                        newClassName           = `${currentPosition.row}${currentPosition.column}`;\n                        $this.addClass(newClassName);\n                    }\n                }\n                break;\n        }\n    }\n\n    function moveToEdge(tile, direction, rowNum, columnNum) {\n        let isThisTileMoved = false;\n        switch (direction) {\n\n            case 'up':\n                for (let i = 0; i < rowNum; i++) {\n                    if ($(`.${i}${columnNum}`).length === 0) {\n                        // $('.xy').length === 0 means no tile is currently occupying the xy grid.\n                        if (i > 0) {\n                            /*\n                             if i === 0, we're moving all the way to the edge, and no tile to merge with. No point try merging.\n                             Case 1: There is 1 or 2 empty grid between current tile and the tile we want to merge.\n                             +---+                      +---+                       +---+\n                             | 4 |                      | 4 |                       | 4 |\n                             +---+                      +---+                       +---+\n                             | 0 |<-- i = 1             | 2 |                       | 0 |  <--  i = 1\n                             +---+                      +---+                       +---+\n                             | 4 |<-- rowNum = 2        | 0 |<-- i = 2              | 0 |\n                             +---+                      +---+                       +---+\n                             | 0 |                      | 2 |<-- rowNum = 3         | 4 |  <--  rowNum = 3\n                             +---+                      +---+                       +---+\n                             rowNum-i==1                rowNum-i==1                  rowNum-i==2\n                             */\n                            isThisTileMoved = tryMergeCase1(tile, 'up', i, rowNum, columnNum, MOVE_DISTANCE);\n                            /*\n                             tryMergeCase1: if we cannot merge a tile, we won't move it at all. If the attempt is\n                             successful (they have the same value), tryMergeCase1 will move current tile and return true.\n                             */\n                            if (isThisTileMoved === true) {\n                                // return -1 so moveOneTile() will remove this tile from DOM.\n                                isAnyTileMoved = true;\n                                return -1;\n                            }\n                        }\n                        /*\n                         if we reach here, either i === 0, and we just found an empty grid on the edge,\n                         or we attempted to merge but failed, so w're just gonna move this tile to the empty space.\n                         +---+                          +---+\n                         | 0 |    i === 0               | 4 |\n                         +---+                          +---+\n                         | 0 |                          | 2 |\n                         +---+                          +---+\n                         | 2 |                          | 0 |   <-- i === 2, but merge failed. Just move.\n                         +---+                          +---+\n                         | 0 |                          | 4 |\n                         +---+                          +---+\n                         */\n                        tile.animate({marginTop: '-=' + (rowNum - i) * MOVE_DISTANCE + 'px'}, 100);\n                        isAnyTileMoved = true;\n                        return i;\n                    }\n                }\n                /*\n                 If we get out of the for-loop, we know there is no empty grid between our current tile and the tile\n                 we attempt to merge with. This is Case 2:\n                 +---+                                  +---+\n                 | 4 |                                  | 8 |\n                 +---+                                  +---+\n                 | 2 |                                  | 4 |\n                 +---+                                  +---+\n                 | 4 |                                  | 2 |\n                 +---+                                  +---+\n                 | 4 |                                  | 4 |\n                 +---+                                  +---+\n                 Case 2: Merge the 2 \"4\"'s.            Nothing we can do.\n                 */\n                if (rowNum > 0) {\n                    isThisTileMoved = tryMergeCase2(tile, 'up', rowNum, columnNum, MOVE_DISTANCE);\n                }\n                if (isThisTileMoved === true) {\n                    isAnyTileMoved = true;\n                    return -1;\n                }\n                return rowNum;\n\n            case 'down':\n                for (let i = 3; i > rowNum; i--) {\n                    if ($(`.${i}${columnNum}`).length === 0) {\n                        if (i < 3) {\n                            isThisTileMoved = tryMergeCase1(tile, 'down', i, rowNum, columnNum, MOVE_DISTANCE);\n                            if (isThisTileMoved === true) {\n                                // return -1 so moveOneTile() will remove this tile from DOM.\n                                isAnyTileMoved = true;\n                                return -1;\n                            }\n                        }\n                        tile.animate({marginTop: '+=' + (i - rowNum) * MOVE_DISTANCE + 'px'}, 100);\n                        isAnyTileMoved = true;\n                        return i;\n                    }\n                }\n                if (rowNum < 3) {\n                    isThisTileMoved = tryMergeCase2(tile, 'down', rowNum, columnNum, MOVE_DISTANCE);\n                }\n                if (isThisTileMoved === true) {\n                    isAnyTileMoved = true;\n                    return -1;\n                }\n                return rowNum;\n\n            case 'left':\n                for (let j = 0; j < columnNum; j++) {\n                    if ($(`.${rowNum}${j}`).length === 0) {\n                        if (j > 0) {\n                            isThisTileMoved = tryMergeCase1(tile, 'left', j, rowNum, columnNum, MOVE_DISTANCE);\n                            if (isThisTileMoved === true) {\n                                // return -1 so moveOneTile() will remove this tile from DOM.\n                                isAnyTileMoved = true;\n                                return -1;\n                            }\n                        }\n                        tile.animate({marginLeft: '-=' + (columnNum - j) * MOVE_DISTANCE + 'px'}, 100);\n                        isAnyTileMoved = true;\n                        return j;\n                    }\n                }\n                if (columnNum > 0) {\n                    isThisTileMoved = tryMergeCase2(tile, 'left', rowNum, columnNum, MOVE_DISTANCE);\n                }\n                if (isThisTileMoved === true) {\n                    isAnyTileMoved = true;\n                    return -1;\n                }\n                return columnNum;\n\n            case 'right':\n                for (let j = 3; j > columnNum; j--) {\n                    if ($(`.${rowNum}${j}`).length === 0) {\n                        if (j < 3) {\n                            isThisTileMoved = tryMergeCase1(tile, 'right', j, rowNum, columnNum, MOVE_DISTANCE);\n                            if (isThisTileMoved === true) {\n                                // return -1 so moveOneTile() will remove this tile from DOM.\n                                isAnyTileMoved = true;\n                                return -1;\n                            }\n                        }\n                        tile.animate({marginLeft: '+=' + (j - columnNum) * MOVE_DISTANCE + 'px'}, 100);\n                        isAnyTileMoved = true;\n                        return j;\n                    }\n                }\n                if (columnNum < 3) {\n                    isThisTileMoved = tryMergeCase2(tile, 'right', rowNum, columnNum, MOVE_DISTANCE);\n                }\n                if (isThisTileMoved === true) {\n                    isAnyTileMoved = true;\n                    return -1;\n                }\n                return columnNum;\n        }\n    }\n}\n\n"]}