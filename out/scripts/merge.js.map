{"version":3,"sources":["../../scripts/merge.js"],"names":[],"mappings":";;AAAA,SAAS,aAAT,CAAuB,IAAvB,EAA6B,SAA7B,EAAwC,EAAxC,EAA4C,GAA5C,EAAiD,MAAjD,EAAyD,YAAzD,EAAuE;;;;;;;;;;;;;;;AAenE,iBAfmE;;AAgBnE,QAAI,eAAe,KAAK,IAAL,CAAU,OAAV,EAAmB,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,EAAiC,KAAjC,CAAuC,CAAvC,CAAf,CAhB+D;AAiBnE,YAAQ,SAAR;AACI,aAAK,IAAL;AACI,gBAAI,aAAkB,SAAM,KAAK,CAAL,IAAS,MAAf,CAAlB;gBACA,kBAAkB,WAAW,IAAX,CAAgB,OAAhB,EAAyB,KAAzB,CAA+B,GAA/B,CAAlB;gBACA,gBAAkB,gBAAgB,CAAhB,CAAlB;gBACA,aAAkB,gBAAgB,CAAhB,EAAmB,KAAnB,CAAyB,CAAzB,CAAlB,CAJR;AAKI,gBAAI,eAAe,YAAf,EAA6B;;;AAG7B,2BAAW,QAAX,GAAsB,IAAtB,CAA2B,UAAC,KAAD,EAAQ,IAAR;2BAAiB,aAAa,CAAb;iBAAjB,CAA3B;;AAH6B,0BAK7B,CAAW,IAAX,CAAgB,OAAhB,EAAyB,UAAC,KAAD,EAAQ,IAAR;0CAA8B,aAAa,CAAb,SAAkB;iBAAhD,CAAzB,CAL6B;AAM7B,qBAAK,OAAL,CAAa,EAAC,WAAW,OAAO,CAAC,MAAM,EAAN,GAAW,CAAX,CAAD,GAAiB,YAAjB,GAAgC,IAAvC,EAAzB,EAAuE,GAAvE,EAN6B;AAO7B,uBAAO,IAAP,CAP6B;aAAjC;AASA,mBAAO,KAAP,CAdJ;;AADJ,aAiBS,MAAL;AACI,gBAAI,aAAkB,SAAM,KAAK,CAAL,IAAS,MAAf,CAAlB;gBACA,kBAAkB,WAAW,IAAX,CAAgB,OAAhB,EAAyB,KAAzB,CAA+B,GAA/B,CAAlB;gBACA,gBAAkB,gBAAgB,CAAhB,CAAlB;gBACA,aAAkB,gBAAgB,CAAhB,EAAmB,KAAnB,CAAyB,CAAzB,CAAlB,CAJR;AAKI,gBAAI,eAAe,YAAf,EAA6B;AAC7B,2BAAW,QAAX,GAAsB,IAAtB,CAA2B,UAAC,KAAD,EAAQ,IAAR;2BAAiB,aAAa,CAAb;iBAAjB,CAA3B,CAD6B;AAE7B,2BAAW,IAAX,CAAgB,OAAhB,EAAyB,UAAC,KAAD,EAAQ,IAAR;0CAA8B,aAAa,CAAb,SAAkB;iBAAhD,CAAzB,CAF6B;AAG7B,qBAAK,OAAL,CAAa,EAAC,WAAW,OAAO,CAAC,KAAK,GAAL,GAAW,CAAX,CAAD,GAAiB,YAAjB,GAAgC,IAAvC,EAAzB,EAAuE,GAAvE,EAH6B;AAI7B,uBAAO,IAAP,CAJ6B;aAAjC;AAMA,mBAAO,KAAP,CAXJ;;AAjBJ,aA8BS,MAAL;AACI,gBAAI,YAAiB,QAAM,OAAM,KAAK,CAAL,CAAZ,CAAjB;gBACA,iBAAiB,UAAU,IAAV,CAAe,OAAf,EAAwB,KAAxB,CAA8B,GAA9B,CAAjB;gBACA,eAAiB,eAAe,CAAf,CAAjB;gBACA,YAAiB,eAAe,CAAf,EAAkB,KAAlB,CAAwB,CAAxB,CAAjB,CAJR;AAKI,gBAAI,cAAc,YAAd,EAA4B;AAC5B,0BAAU,QAAV,GAAqB,IAArB,CAA0B,UAAC,KAAD,EAAQ,IAAR;2BAAiB,YAAY,CAAZ;iBAAjB,CAA1B,CAD4B;AAE5B,0BAAU,IAAV,CAAe,OAAf,EAAwB,UAAC,KAAD,EAAQ,IAAR;0CAA8B,YAAY,CAAZ,SAAiB;iBAA/C,CAAxB,CAF4B;AAG5B,qBAAK,OAAL,CAAa,EAAC,YAAY,OAAO,CAAC,SAAS,EAAT,GAAc,CAAd,CAAD,GAAoB,YAApB,GAAmC,IAA1C,EAA1B,EAA2E,GAA3E,EAH4B;AAI5B,uBAAO,IAAP,CAJ4B;aAAhC;AAMA,mBAAO,KAAP,CAXJ;;AA9BJ,aA2CS,OAAL;AACI,gBAAI,aAAkB,QAAM,OAAM,KAAK,CAAL,CAAZ,CAAlB;gBACA,kBAAkB,WAAW,IAAX,CAAgB,OAAhB,EAAyB,KAAzB,CAA+B,GAA/B,CAAlB;gBACA,gBAAkB,gBAAgB,CAAhB,CAAlB;gBACA,aAAkB,gBAAgB,CAAhB,EAAmB,KAAnB,CAAyB,CAAzB,CAAlB,CAJR;AAKI,gBAAI,eAAe,YAAf,EAA6B;AAC7B,2BAAW,QAAX,GAAsB,IAAtB,CAA2B,UAAC,KAAD,EAAQ,IAAR;2BAAiB,aAAa,CAAb;iBAAjB,CAA3B,CAD6B;AAE7B,2BAAW,IAAX,CAAgB,OAAhB,EAAyB,UAAC,KAAD,EAAQ,IAAR;0CAA8B,aAAa,CAAb,SAAkB;iBAAhD,CAAzB,CAF6B;AAG7B,qBAAK,OAAL,CAAa,EAAC,YAAY,OAAO,CAAC,SAAS,EAAT,GAAc,CAAd,CAAD,GAAoB,YAApB,GAAmC,IAA1C,EAA1B,EAA2E,GAA3E,EAH6B;AAI7B,uBAAO,IAAP,CAJ6B;aAAjC;AAMA,mBAAO,KAAP,CAXJ;AA3CJ,KAjBmE;CAAvE;;AA4EA,SAAS,aAAT,CAAuB,IAAvB,EAA6B,SAA7B,EAAwC,GAAxC,EAA6C,MAA7C,EAAqD,YAArD,EAAmE;;;;;;;;;;;;;;AAc/D,iBAd+D;;AAgB/D,QAAI,eAAe,KAAK,IAAL,CAAU,OAAV,EAAmB,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,EAAiC,KAAjC,CAAuC,CAAvC,CAAf,CAhB2D;AAiB/D,YAAQ,SAAR;AACI,aAAK,IAAL;AACI,gBAAI,aAAkB,SAAM,SAAS,GAAT,IAAgB,CAAhB,IAAoB,MAA1B,CAAlB;gBACA,kBAAkB,WAAW,IAAX,CAAgB,OAAhB,EAAyB,KAAzB,CAA+B,GAA/B,CAAlB;gBACA,gBAAkB,gBAAgB,CAAhB,CAAlB;gBACA,aAAkB,gBAAgB,CAAhB,EAAmB,KAAnB,CAAyB,CAAzB,CAAlB,CAJR;;AAMI,gBAAI,eAAe,YAAf,EAA6B;AAC7B,2BAAW,QAAX,GAAsB,IAAtB,CAA2B,UAAC,KAAD,EAAQ,IAAR;2BAAiB,aAAa,CAAb;iBAAjB,CAA3B,CAD6B;AAE7B,2BAAW,IAAX,CAAgB,OAAhB,EAAyB,UAAC,KAAD,EAAQ,IAAR;0CAA8B,aAAa,CAAb,SAAkB;iBAAhD,CAAzB,CAF6B;AAG7B,qBAAK,OAAL,CAAa,EAAC,kBAAgB,mBAAhB,EAAd,EAAiD,GAAjD,EAH6B;AAI7B,uBAAO,IAAP,CAJ6B;aAAjC;AAMA,mBAAO,KAAP,CAZJ;;AADJ,aAeS,MAAL;AACI,gBAAI,aAAkB,SAAM,SAAS,GAAT,IAAgB,CAAhB,IAAoB,MAA1B,CAAlB;gBACA,kBAAkB,WAAW,IAAX,CAAgB,OAAhB,EAAyB,KAAzB,CAA+B,GAA/B,CAAlB;gBACA,gBAAkB,gBAAgB,CAAhB,CAAlB;gBACA,aAAkB,gBAAgB,CAAhB,EAAmB,KAAnB,CAAyB,CAAzB,CAAlB,CAJR;;AAMI,gBAAI,eAAe,YAAf,EAA6B;AAC7B,2BAAW,QAAX,GAAsB,IAAtB,CAA2B,UAAC,KAAD,EAAQ,IAAR;2BAAiB,aAAa,CAAb;iBAAjB,CAA3B,CAD6B;AAE7B,2BAAW,IAAX,CAAgB,OAAhB,EAAyB,UAAC,KAAD,EAAQ,IAAR;0CAA8B,aAAa,CAAb,SAAkB;iBAAhD,CAAzB,CAF6B;AAG7B,qBAAK,OAAL,CAAa,EAAC,kBAAgB,mBAAhB,EAAd,EAAiD,GAAjD,EAH6B;AAI7B,uBAAO,IAAP,CAJ6B;aAAjC;AAMA,mBAAO,KAAP,CAZJ;;AAfJ,aA6BS,MAAL;AACI,gBAAI,YAAiB,QAAM,OAAM,SAAS,MAAT,IAAmB,CAAnB,CAAZ,CAAjB;gBACA,iBAAiB,UAAU,IAAV,CAAe,OAAf,EAAwB,KAAxB,CAA8B,GAA9B,CAAjB;gBACA,eAAiB,eAAe,CAAf,CAAjB;gBACA,YAAiB,eAAe,CAAf,EAAkB,KAAlB,CAAwB,CAAxB,CAAjB,CAJR;;AAMI,gBAAI,cAAc,YAAd,EAA4B;AAC5B,0BAAU,QAAV,GAAqB,IAArB,CAA0B,UAAC,KAAD,EAAQ,IAAR;2BAAiB,YAAY,CAAZ;iBAAjB,CAA1B,CAD4B;AAE5B,0BAAU,IAAV,CAAe,OAAf,EAAwB,UAAC,KAAD,EAAQ,IAAR;0CAA8B,YAAY,CAAZ,SAAiB;iBAA/C,CAAxB,CAF4B;AAG5B,qBAAK,OAAL,CAAa,EAAC,mBAAiB,mBAAjB,EAAd,EAAkD,GAAlD,EAH4B;AAI5B,uBAAO,IAAP,CAJ4B;aAAhC;AAMA,mBAAO,KAAP,CAZJ;;AA7BJ,aA2CS,OAAL;AACI,gBAAI,aAAkB,QAAM,OAAM,SAAS,MAAT,IAAmB,CAAnB,CAAZ,CAAlB;gBACA,kBAAkB,WAAW,IAAX,CAAgB,OAAhB,EAAyB,KAAzB,CAA+B,GAA/B,CAAlB;gBACA,gBAAkB,gBAAgB,CAAhB,CAAlB;gBACA,aAAkB,gBAAgB,CAAhB,EAAmB,KAAnB,CAAyB,CAAzB,CAAlB,CAJR;;AAMI,gBAAI,eAAe,YAAf,EAA6B;AAC7B,2BAAW,QAAX,GAAsB,IAAtB,CAA2B,UAAC,KAAD,EAAQ,IAAR;2BAAiB,aAAa,CAAb;iBAAjB,CAA3B,CAD6B;AAE7B,2BAAW,IAAX,CAAgB,OAAhB,EAAyB,UAAC,KAAD,EAAQ,IAAR;0CAA8B,aAAa,CAAb,SAAkB;iBAAhD,CAAzB,CAF6B;AAG7B,qBAAK,OAAL,CAAa,EAAC,mBAAiB,mBAAjB,EAAd,EAAkD,GAAlD,EAH6B;AAI7B,uBAAO,IAAP,CAJ6B;aAAjC;AAMA,mBAAO,KAAP,CAZJ;AA3CJ,KAjB+D;CAAnE","file":"merge.js","sourcesContent":["function tryMergeCase1(tile, direction, ij, row, column, moveDistance) {\n    /*\n     Let's say we press 'up', here is case 1:\n     For 1 column:\n     +---+\n     | 4 |  Since we will always process 0th row, then 1st row, then 2nd row, then 3rd row,\n     +---+  we know for sure that when we want to process the \"2\" at the bottom, all rows above it has been processed.\n     | 2 |\n     +---+\n     | 0 |  Case 1: There are 1 or more empty grids between our tile and the tile it attempts to merge to.\n     +---+\n     | 2 |  If we succeed, we move our tile and return true; if we fail, we don't do anything and return false.\n     +---+\n     */\n\n    \"use strict\";\n    let currentValue = tile.attr('class').split(' ')[1].slice(5);\n    switch (direction) {\n        case 'up':\n            let $tileAbove      = $(`.${ij - 1}${column}`),\n                aboveClassArray = $tileAbove.attr('class').split(' '),\n                abovePosition   = aboveClassArray[2],\n                aboveValue      = aboveClassArray[1].slice(5);\n            if (aboveValue === currentValue) {\n                // this tile and the tile above it has the same value. merge them.\n                // double the text\n                $tileAbove.children().text((index, text) => aboveValue * 2);\n                // change class name\n                $tileAbove.attr('class', (index, attr) => `tile value${aboveValue * 2} ${abovePosition}`);\n                tile.animate({marginTop: '-=' + (row - ij + 1) * moveDistance + 'px'}, 100);\n                return true;\n            }\n            return false;\n\n        case 'down':\n            let $tileBelow      = $(`.${ij + 1}${column}`),\n                belowClassArray = $tileBelow.attr('class').split(' '),\n                belowPosition   = belowClassArray[2],\n                belowValue      = belowClassArray[1].slice(5);\n            if (belowValue === currentValue) {\n                $tileBelow.children().text((index, text) => belowValue * 2);\n                $tileBelow.attr('class', (index, attr) => `tile value${belowValue * 2} ${belowPosition}`);\n                tile.animate({marginTop: '+=' + (ij - row + 1) * moveDistance + 'px'}, 100);\n                return true;\n            }\n            return false;\n\n        case 'left':\n            let $tileLeft      = $(`.${row}${ij - 1}`),\n                leftClassArray = $tileLeft.attr('class').split(' '),\n                leftPosition   = leftClassArray[2],\n                leftValue      = leftClassArray[1].slice(5);\n            if (leftValue === currentValue) {\n                $tileLeft.children().text((index, text) => leftValue * 2);\n                $tileLeft.attr('class', (index, attr) => `tile value${leftValue * 2} ${leftPosition}`);\n                tile.animate({marginLeft: '-=' + (column - ij + 1) * moveDistance + 'px'}, 100);\n                return true;\n            }\n            return false;\n\n        case 'right':\n            let $tileRight      = $(`.${row}${ij + 1}`),\n                rightClassArray = $tileRight.attr('class').split(' '),\n                rightPosition   = rightClassArray[2],\n                rightValue      = rightClassArray[1].slice(5);\n            if (rightValue === currentValue) {\n                $tileRight.children().text((index, text) => rightValue * 2);\n                $tileRight.attr('class', (index, attr) => `tile value${rightValue * 2} ${rightPosition}`);\n                tile.animate({marginLeft: '+=' + (column - ij + 1) * moveDistance + 'px'}, 100);\n                return true;\n            }\n            return false;\n    }\n\n}\n\nfunction tryMergeCase2(tile, direction, row, column, moveDistance) {\n    /*\n     Case 2 when pressing 'up', for example\n     For 1 column:\n     +---+\n     | 4 |  Case 2: Say we're attempting to merge the \"2\" on the 2nd row to the \"2\" on the 1st row,\n     +---+  and there is no empty grid between our tile and the tile we attempt to merge.\n     | 2 |\n     +---+  If we succeed, we move our tile and return true; if we fail, we don't do anything and return false.\n     | 2 |\n     +---+\n     | 0 |\n     +---+\n     */\n    \"use strict\";\n\n    let currentValue = tile.attr('class').split(' ')[1].slice(5);\n    switch (direction) {\n        case 'up':\n            let $tileAbove      = $(`.${parseInt(row) - 1}${column}`),\n                aboveClassArray = $tileAbove.attr('class').split(' '),\n                abovePosition   = aboveClassArray[2],\n                aboveValue      = aboveClassArray[1].slice(5);\n\n            if (aboveValue === currentValue) {\n                $tileAbove.children().text((index, text) => aboveValue * 2);\n                $tileAbove.attr('class', (index, attr) => `tile value${aboveValue * 2} ${abovePosition}`);\n                tile.animate({marginTop: `-=${moveDistance}px`}, 100);\n                return true;\n            }\n            return false;\n\n        case 'down':\n            let $tileBelow      = $(`.${parseInt(row) + 1}${column}`),\n                belowClassArray = $tileBelow.attr('class').split(' '),\n                belowPosition   = belowClassArray[2],\n                belowValue      = belowClassArray[1].slice(5);\n\n            if (belowValue === currentValue) {\n                $tileBelow.children().text((index, text) => belowValue * 2);\n                $tileBelow.attr('class', (index, attr) => `tile value${belowValue * 2} ${belowPosition}`);\n                tile.animate({marginTop: `+=${moveDistance}px`}, 100);\n                return true;\n            }\n            return false;\n\n        case 'left':\n            let $tileLeft      = $(`.${row}${parseInt(column) - 1}`),\n                leftClassArray = $tileLeft.attr('class').split(' '),\n                leftPosition   = leftClassArray[2],\n                leftValue      = leftClassArray[1].slice(5);\n\n            if (leftValue === currentValue) {\n                $tileLeft.children().text((index, text) => leftValue * 2);\n                $tileLeft.attr('class', (index, attr) => `tile value${leftValue * 2} ${leftPosition}`);\n                tile.animate({marginLeft: `-=${moveDistance}px`}, 100);\n                return true;\n            }\n            return false;\n\n        case 'right':\n            let $tileRight      = $(`.${row}${parseInt(column) + 1}`),\n                rightClassArray = $tileRight.attr('class').split(' '),\n                rightPosition   = rightClassArray[2],\n                rightValue      = rightClassArray[1].slice(5);\n\n            if (rightValue === currentValue) {\n                $tileRight.children().text((index, text) => rightValue * 2);\n                $tileRight.attr('class', (index, attr) => `tile value${rightValue * 2} ${rightPosition}`);\n                tile.animate({marginLeft: `+=${moveDistance}px`}, 100);\n                return true;\n            }\n            return false;\n    }\n}\n"]}